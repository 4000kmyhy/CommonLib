import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec
import java.nio.charset.StandardCharsets

def encrypt = { String str, String key ->
    Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM)
    cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(key))
    byte[] encryptBytes = cipher.doFinal(str.getBytes(CHARSET_UTF8))
    return Base64.encoder.encodeToString(encryptBytes)
}

def getSecretKey(String secretKey) {
    secretKey = toMakeKey(secretKey, SECRET_KEY_LENGTH, DEFAULT_VALUE)
    return new SecretKeySpec(secretKey.getBytes(CHARSET_UTF8), KEY_ALGORITHM)
}

def toMakeKey(String secretKey, int length, String text) {
    int secretLength = secretKey.length()
    if (secretLength < length)
    {
        StringBuilder builder = new StringBuilder()
        builder.append(secretKey)
        for (int i = 0; i < length - secretLength; i++)
        {
            builder.append(text)
        }

        return builder.toString()
    }
    else if (secretLength > length)
    {
        return secretKey.substring(0, length)
    }
    else
    {
        return secretKey
    }
}

ext {

    KEY_ALGORITHM = "AES"
    SECRET_KEY_LENGTH = 32
    CHARSET_UTF8 = StandardCharsets.UTF_8
    DEFAULT_VALUE = "0"
    CIPHER_ALGORITHM = "AES/ECB/PKCS5Padding"

    encryptFun = encrypt
}